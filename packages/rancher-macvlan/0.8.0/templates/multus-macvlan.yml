#
# https://github.com/k8snetworkplumbingwg/multus-cni/blob/v3.9.2/deployments/multus-daemonset.yml
#
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: 'NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing
            Working Group to express the intent for attaching pods to one or more logical or physical
            networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec'
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this represen
                tation of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'NetworkAttachmentDefinition spec defines the desired state of a network attachment'
              type: object
              properties:
                config:
                  description: 'NetworkAttachmentDefinition config is a JSON-formatted CNI configuration'
                  type: string
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
  annotations:
    "helm.sh/resource-policy": keep
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
  annotations:
    "helm.sh/resource-policy": keep
---
#
# https://github.com/k8snetworkplumbingwg/multus-cni/blob/v3.9.2/deployments/multus-daemonset.yml
#
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-multus-ds
  namespace: kube-system
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: multus
  template:
    metadata:
      labels:
        name: multus
      annotations:
        release/revision: "{{ .Release.Revision }}"
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
      serviceAccountName: multus
      containers:
      - name: kube-multus
        image: {{ template "registry_url" . }}{{ .Values.image.multus.repository }}:{{ .Values.image.multus.tag }}
        imagePullPolicy: IfNotPresent
        command: ["/entrypoint.sh"]
        args:
        - --multus-conf-file=auto
        - --cni-version={{ .Values.multus.cniVersion }}
        - --multus-kubeconfig-file-host={{ template "multus_cniconf_kubeconfig" . }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "rm -f /host/etc/cni/net.d/00-multus.conf"]
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cni
        hostPath:
          path: {{ template "multus_cniconf_host_path" . }}
      - name: cnibin
        hostPath:
          path: {{ template "multus_cnibin_host_path" . }}
      nodeSelector:
        kubernetes.io/os: linux
---
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: network-cni-ds
  namespace: kube-system
  labels:
    name: network-cni-ds
spec:
  selector:
    matchLabels:
      name: network-cni-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: network-cni-ds
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
      serviceAccountName: multus
      containers:
      - name: kube-macvlan-cni
        image: {{ template "registry_url" . }}{{ .Values.image.staticMacvlan.repository }}:{{ .Values.image.staticMacvlan.tag }}
        imagePullPolicy: IfNotPresent
        command: ["/entrypoint.sh"]
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
      volumes:
      - name: cni
        hostPath:
          path: {{ template "multus_cniconf_host_path" . }}
      - name: cnibin
        hostPath:
          path: {{ template "multus_cnibin_host_path" . }}
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-admission-deploy
  namespace: kube-system
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: network-admission-deploy
  template:
    metadata:
      labels:
        app: network-admission-deploy
    spec:
      containers:
      - image: {{ template "registry_url" . }}{{ .Values.image.admission.repository }}:{{ .Values.image.admission.tag }}
        name: network-admission-deploy
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash","-c","/pre-stop-hook.sh"]
      serviceAccountName: multus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-controller
  namespace: kube-system
  labels:
    app: network-controller
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: network-controller
  template:
    metadata:
      namespace: kube-system
      labels:
        app: network-controller
    spec:
      serviceAccountName: multus
      containers:
      - image: {{ template "registry_url" . }}{{ .Values.image.networkController.repository }}:{{ .Values.image.networkController.tag }}
        name: network-controller
        env:
        - name: PANDARIA_MACVLAN_CNI_ARP_POLICY
          value: "{{ .Values.arpPolicy }}"
        - name: PANDARIA_MACVLAN_CNI_PROXY_ARP
          value: "{{ .Values.proxyARP }}"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: {{ .Values.ncResources.limits.memory | quote }}
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook/certs
      volumes:
      - name: webhook-certs
        secret:
          secretName: network-controller-webhook-certs
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-net-attach-def-controller
  namespace: kube-system
  labels:
    app: kube-net-attach-def-controller
spec:
  selector:
    matchLabels:
      app: kube-net-attach-def-controller
  template:
    metadata:
      namespace: kube-system
      labels:
        app: kube-net-attach-def-controller
    spec:
      serviceAccountName: multus
      containers:
      - image: {{ template "registry_url" . }}{{ .Values.image.nadController.repository }}:{{ .Values.image.nadController.tag }}
        name: kube-net-attach-def-controller
        resources:
          limits:
            memory: {{ .Values.nadcResources.limits.memory | quote }}
        imagePullPolicy: IfNotPresent
        command: [ "k8s-net-attach-def-controller" ]
---
