{{ if eq .Values.plugin "Flannel+Macvlan" }}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                config:
                  type: string
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
  annotations:
    "helm.sh/resource-policy": keep
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
  annotations:
    "helm.sh/resource-policy": keep
---
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: multus-cni-config
  namespace: kube-system
  labels:
    tier: node
    app: multus
data:
  cni-conf.json: |
    {
      "name": "multus-cni-network",
      "cniVersion": "0.3.1",
      "type": "multus",
      "capabilities": {
        "portMappings": true
      },
      "delegates": [
        {
          "cniVersion": "0.3.1",
          "name": "cbr0",
          "plugins": [
            {
              "type": "flannel",
              "name": "flannel.1",
                "delegate": {
                  "isDefaultGateway": true,
                  "hairpinMode": true
                }
              },
              {
                "type": "portmap",
                "capabilities": {
                  "portMappings": true
                }
              }
          ]
        }
      ],
      "logFile": "/var/log/multus.log",
      "kubeconfig": "/etc/cni/net.d/multus.d/multus.kubeconfig"
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-multus-ds
  namespace: kube-system
  labels:
    tier: node
    app: multus
    name: multus
spec:
  selector:
    matchLabels:
      name: multus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: node
        app: multus
        name: multus
      annotations:
        release/revision: "{{ .Release.Revision }}"
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
      serviceAccountName: multus
      containers:
      - name: kube-multus
        image: {{ template "system_default_registry" . }}cnrancher/mirrored-nfvpe-multus:v3.4.2
        imagePullPolicy: IfNotPresent
        command: ["/entrypoint.sh"]
        args:
        - "--multus-conf-file=/tmp/multus-conf/70-multus.conf"
        - "--cni-version=0.3.1"
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
        - name: multus-cfg
          mountPath: /tmp/multus-conf
      volumes:
      - name: cni
        hostPath:
          path: /etc/cni/net.d
      - name: cnibin
        hostPath:
          path: /opt/cni/bin
      - name: multus-cfg
        configMap:
          name: multus-cni-config
          items:
          - key: cni-conf.json
            path: 70-multus.conf
---
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: network-cni-ds
  namespace: kube-system
  labels:
    tier: node
    app: multus
    name: network-cni-ds
spec:
  selector:
    matchLabels:
      name: network-cni-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: node
        app: multus
        name: network-cni-ds
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
      serviceAccountName: multus
      containers:
      - name: kube-macvlan-cni
        image: {{ template "system_default_registry" . }}cnrancher/static-macvlan-cni:v0.3.8
        imagePullPolicy: IfNotPresent
        command: ["/entrypoint.sh"]
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
      volumes:
      - name: cni
        hostPath:
          path: /etc/cni/net.d
      - name: cnibin
        hostPath:
          path: /opt/cni/bin
---
# This is a modified Flannel daemonset.
# it is based on: https://github.com/flannel-io/flannel/blob/v0.15.1/Documentation/kube-flannel.yml
# Notably, it removes the creation of an configuration file in/etc/cni/net.d/
# differences with the upstream:
#    1. remove the creation of an configuration file in/etc/cni/net.d/
#    2. remove cni binary copies
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp.flannel.unprivileged
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  volumes:
  - configMap
  - secret
  - emptyDir
  - hostPath
  allowedHostPaths:
  - pathPrefix: "/etc/cni/net.d"
  - pathPrefix: "/etc/kube-flannel"
  - pathPrefix: "/run/flannel"
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  # Capabilities
  allowedCapabilities: ['NET_ADMIN', 'NET_RAW']
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: false
  hostIPC: false
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  # SELinux
  seLinux:
    # SELinux is unused in CaaSP
    rule: 'RunAsAny'
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flannel
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames: ['psp.flannel.unprivileged']
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    macvlan.pandaria.io/plugin: multus-flannel-macvlan
  name: flannel
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  iface: "{{ .Values.iface }}"
  net-conf.json: |
    {
      "Network": "{{ .Values.podCIDR }}",
      "Backend": {
        "Type": "vxlan"
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
      annotations:
        release/revision: "{{ .Release.Revision }}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      hostNetwork: true
      priorityClassName: system-node-critical
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      containers:
      - name: kube-flannel
        image: {{ template "system_default_registry" . }}rancher/mirrored-coreos-flannel:v0.15.1
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        livenessProbe:
          exec:
            command: ["ifconfig", "flannel.1"]
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: false
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FLANNELD_IFACE
          valueFrom:
            configMapKeyRef:
              name: kube-flannel-cfg
              key: iface
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
      - name: run
        hostPath:
          path: /run/flannel
      - name: flannel-cfg
        configMap:
          name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-admission-deploy
  namespace: kube-system
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: network-admission-deploy
  template:
    metadata:
      labels:
        app: network-admission-deploy
    spec:
      containers:
      - name: network-admission-deploy
        image: {{ template "system_default_registry" . }}cnrancher/network-admission-deploy:v0.6.9
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash","-c","/pre-stop-hook.sh"]
      serviceAccountName: multus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-controller
  namespace: kube-system
  labels:
    app: network-controller
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: network-controller
  template:
    metadata:
      namespace: kube-system
      labels:
        app: network-controller
    spec:
      serviceAccountName: multus
      containers:
      - name: network-controller
        image: {{ template "system_default_registry" . }}cnrancher/network-controller:v0.6.9
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: {{ .Values.ncResources.limits.memory | quote }}
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook/certs
      volumes:
      - name: webhook-certs
        secret:
          secretName: network-controller-webhook-certs
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-net-attach-def-controller
  namespace: kube-system
  labels:
    app: kube-net-attach-def-controller
spec:
  selector:
    matchLabels:
      app: kube-net-attach-def-controller
  template:
    metadata:
      namespace: kube-system
      labels:
        app: kube-net-attach-def-controller
    spec:
      serviceAccountName: multus
      containers:
      - image: {{ template "system_default_registry" . }}cnrancher/k8s-net-attach-def-controller:v0.2.2
        imagePullPolicy: IfNotPresent
        name: kube-net-attach-def-controller
        resources:
          limits:
            memory: {{ .Values.nadcResources.limits.memory | quote }}
        command: [ "k8s-net-attach-def-controller" ]
---
{{ end }}
